#include <iostream>
#include <SDL.h>
#include <GL\glew.h>
#include <SDL_opengl.h>

#include "init.h"
#include "Window.h"

#define GLM_ENABLE_EXPERIMENTAL
#include <glm\glm.hpp>
#include <glm\gtx\transform.hpp>
#include <glm\gtc\type_ptr.hpp>

#include "Shaders.h"
#include "Vertex.h"
#include "Texture.h"
#include "Model.h"
#include "Mesh.h"
#include "Light.h"
#include "Timer.h"


//function load vertices & indices from text file.

void obj_file_loader()
{




};

int main(int argc, char ** argsv)
{
	//Initialises the SDL Library, passing in SDL_INIT_VIDEO to only initialise the video subsystems

	//if (SDL_Init(SDL_INIT_VIDEO) < 0)
	//{
	//	
	//	SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR, "SDL_Init failed", SDL_GetError(), NULL);
	//	return 1;
	//}

	//
	//SDL_Window* window = SDL_CreateWindow("SDL2 Window", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 800, 640, SDL_WINDOW_SHOWN | SDL_WINDOW_OPENGL);
	////Checks to see if the window has been created, the pointer will have a value of some kind
	//if (window == nullptr)
	//{
	//	//Show error
	//	SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR, "SDL_CreateWindow failed", SDL_GetError(), NULL);
	//	//Close the SDL Library
	//	//https://wiki.libsdl.org/SDL_Quit
	//	SDL_Quit();
	//	return 1;
	//}

	////Request 3.2 Core OpenGL
	//SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
	//SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 2);
	//SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);

	//SDL_GLContext gl_Context = SDL_GL_CreateContext(window);
	//if (gl_Context == nullptr)
	//{
	//	SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR, "SDL_CreateContext Failed", SDL_GetError(), NULL);

	//	SDL_DestroyWindow(window);
	//	SDL_Quit();

	//	return 1;
	//}

	////init GLEW
	//glewExperimental = GL_TRUE;
	//GLenum err = glewInit();
	//if (err != GLEW_OK)
	//{
	//	//Show error
	//	SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR, "GLEW Initialisation Failed", (char*)glewGetErrorString(err), NULL);
	//	SDL_DestroyWindow(window);
	//	SDL_Quit();

	//	return 1;
	//}

	//GL States
	glEnable(GL_DEPTH_TEST);
	glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);


	//smooth sphere to spiky sphere

	Vertex verts[] =
	{

	{ 0.500000f, -1.931852f, -0.133974f,0.500000f, -1.931852f,-0.133974f, 1.0f},
	{ 0.448288f, -1.931852f, -0.258819f,0.448288f, -1.931852f, -0.258819, 1.0f},
	{ 0.366025f, -1.931852f, -0.366025f,0.366025f,-1.931852f,-0.366025f, 1.0f},
	{ 0.500000f, -1.931852f, -0.133974f,  0.425303f, -2.708320, -0.625252, 1.0f},
	{ 0.448288f, -1.931852f, -0.258819f, 0.133975f, -1.931852f,-0.500000f, 1.0f},
	{0.366025f, -1.931852f, -0.366025f, 0.133975f, -1.931852f, -0.500000f, 1.0f},
	{0.258819f, -1.931852f, -0.448287f, -0.133974f, -1.931852f, -0.500000f, 1.0f},
	{ 0.133975f, -1.931852f, -0.500000f, -0.410278f, -2.685521f, -0.694576f, 1.0f},
	{ 0.000000f ,-1.931852f, -0.517638f,-0.366025f, -1.931852f, -0.366025f, 1.0f},
	{ -0.133974f, -1.931852f, -0.500000f, -0.448288f, -1.931852f, -0.258819f, 1.0f},
	{ -0.258819f, -1.931852f, -0.448288f, -0.500000f, -1.931852f, 0.133975f, 1.0f},
	{-0.366025f, -1.931852f, -0.366025f, -0.448288f, -1.931852f, 0.2588195f, 1.0f},
	{-0.448288f, -1.931852f, -0.258819f, -0.745550f, -2.685521f, -0.257640f, 1.0f},
	{ -0.500000f, -1.931852f, - 0.133975f, -0.517638f, -1.931852f,-0.0000005f, 1.0f},
	{-0.517638f, -1.931852f, -0.000000f, -0.517638f, -1.931852f, -0.0000005f, 1.0f},
	{-0.500000f,-1.931852f, 0.133975f, -0.366025f, -1.931852f,0.3660255f, 1.0f},
	{ -0.448288f, -1.931852f, 0.258819f, -0.258819f, -1.931852f, 0.448288f, 1.0f},
	{ -0.366025f, -1.931852f, 0.366025f, -0.133975f, -1.931852f, 0.500000f, 1.0f},
	{-0.258819f, -1.931852f, 0.448288f, -0.000000f, -1.931852f, 0.517638f, 1.0f},
	{-0.133975f, -1.931852f, 0.500000f, 0.133975, -1.931852f,0.500000f, 1.0f},
	{ -0.000000f, -1.931852f, 0.517638f, 0.258819f, -1.931852f, 0.448288f, 1.0f},
	{0.133975f, -1.931852f, 0.500000f, 0.366025f, -1.931852f, 0.366025f, 1.0f},
	{ 0.258819f, -1.931852f, 0.448288f, 0.680825f,-2.891514f, 0.244998f, 1.0f},
	{ 0.366025f, -1.931852f, 0.366025f,0.500000f,-1.931852f,0.133975f, 1.0f},
	{ 0.448288f, -1.931852f, 0.258819f, 0.517638f, -1.931852f, 0.000000f, 1.0f},
	{ 0.500000f, -1.931852f, 0.133975f, 1.292273f, -2.407772f, -0.431190f, 1.0f},
	{ 0.517638f, -1.931852f, 0.000000f, 0.866025f,-1.732051f,-0.500000f, 1.0f},
	{ 0.965925f ,-1.732051f ,-0.258819f, 0.707106f,-1.732051f, -0.707106f, 1.0f},
	{ 0.866025f, -1.732051f, -0.500000f,0.500000f,-1.732051f, -0.866025f, 1.0f},
	{ 0.707106f, -1.732051f, -0.707106f, 0.258819f,-1.732051f, -0.9659255f, 1.0f},
	{ 0.500000f, -1.732051f, -0.866025f, 0.000000f,-1.732051f,-0.999999f, 1.0f},
	{ 0.258819f, -1.732051f, -0.965925f, -0.2588195f,-1.732051f, -0.965925f, 1.0f},
	{0.000000f, -1.732051f,-0.999999f, -0.707106f,-1.732051f,-0.707107f, 1.0f},
	{-0.258819f, -1.732051f, -0.965925f,-0.866025f,-1.732051f, -0.500000f, 1.0f},
	{-0.500000f, -1.732051f, -0.866025f,-0.965926f,-1.732051f, -0.258819f, 1.0f},
	{-0.707106f, -1.732051f, -0.707107f,-1.000000f,-1.732051f,-0.000000f, 1.0f},
	{-0.866025f, -1.732051f, -0.500000f, -0.965926f,-1.732051f,0.258819f, 1.0f},
	{-0.965926f, - 1.732051f, -0.258819f,-0.866025f,-1.732051f, 0.500000f, 1.0f},
	{-1.000000f, -1.732051f, -0.000000f, -0.988916f,-2.415790f, 1.0663705f, 1.0f},
	{-0.965926f, -1.732051f, 0.258819f, -0.500000f,-1.732051f, 0.8660255f, 1.0f},
	{-0.866025f, -1.732051f, 0.500000f, -0.258819f,-1.732051f,0.965926f, 1.0f},
	{-0.707107f, -1.732051f, 0.707107f, -0.000000f, -1.732051f, 1.000000f, 1.0f},
	{-0.500000f, -1.732051f, 0.866025f, 0.258819f, -1.732051f, -1.7320515f, 1.0f},
	{-0.258819f, -1.732051f, 0.965926f,0.500000f,-1.732051f, 0.866025f, 1.0f},
	{-0.000000f, -1.732051f, 1.000000f, 0.707107f, -1.732051f, 0.707107f, 1.0f},
	{0.258819f, -1.732051f, 0.965926f,0.866025f, -1.732051f, 0.500000f, 1.0f},
	{0.500000f, -1.732051f, 0.866025f, 0.866025f, -1.732051f, 0.258819f, 1.0f},
	{0.707107f, -1.732051f, 0.707107f, 1.000000f, -1.732051f, 0.000000f, 1.0f},
	{0.866025f, -1.732051f, 0.500000f, 1.366025f, -1.414214f, -0.366025f, 1.0f},
	{0.965926f, -1.732051f, 0.258819f, 1.224744f, -1.4142145f, -0.707106f, 1.0f},
	{1.000000f, -1.732051f, 0.000000f,1.000000f, -1.4142145f,-0.999999f, 1.0f},
	{1.366025f, -1.414214f, -0.366025f, 0.707107f, -1.414214f, -1.224744f, 1.0f},
	{1.224744f, -1.414214f, -0.707106f,0.551376f,-2.076955f,-2.311867f, 1.0f},
	{1.000000f, -1.414214f, -0.999999f, 0.000000f, -1.414214f, -1.414213f, 1.0f},
	{0.707107f, -1.414214f, -1.224744f, -0.366025f, -1.414214f, -1.366025f, 1.0f},
	{0.366025f, -1.414214f, -1.366024f, -0.707106f, -1.414214f, -1.366025f, 1.0f},
	{0.000000f, -1.414214f, -1.414213f, -1.414214f,-1.414214, -1.224744f, 1.0f},
	{-0.366025f, -1.414214f, -1.366025f, -0.707106f, -1.732051f, 0.707107f, 1.0f},
	{-0.707106f, -1.414214f, -1.224744f, -1.417743f, -1.950441f, -1.433019f, 1.0f},
	{-1.000000f, -1.414214f, -1.000000f, -1.224744, -1.414214f, -0.707107f, 1.0f},
	{-1.224744f, -1.414214f, -0.707107f, -1.366025f,-1.414214f,-0.366025f, 1.0f},
	{-1.366025f, -1.414214f, -0.366025f, -2.250019f, -2.076955f, -0.162281f, 1.0f},
	{-1.414213f, -1.414214f, -0.000000f, -1.366025f, -1.414214f, 0.366025f, 1.0f},
	{-1.366025f, -1.414214f, 0.366025f, -1.224745f,-1.414214f, 0.7071075f, 1.0f},
	{-1.224745f, -1.414214f, 0.707107f, -1.000000f, -1.414214f, 1.000000f, 1.0f},
	{-1.000000f, -1.414214f, 1.000000f, -0.707107f, -1.414214f,1.224745f, 1.0f},
	{-0.707107f, -1.414214f, 1.224745f, -0.366025f,-1.414214f, 1.366025f, 1.0f},
	{-0.366025f, -1.414214f, 1.366025f, -0.000000f, -1.952284f,1.952283f, 1.0f},
	{-0.000000f, -1.414214f, 1.414213f, 0.366025f, - 1.414214f, 1.366025f, 1.0f},
	{0.366025f, -1.414214f, 1.366025f, 0.932482f, - 1.965938f, 1.631153f, 1.0f},
	{0.707107f, -1.414214f, 1.224745f, 1.000000f, - 1.414214f, 1.000000f, 1.0f},
	{1.000000f, -1.414214f, 1.000000f, 1.224745f, - 1.414214f, 0.707107f, 1.0f},
	{1.224745f, -1.414214f, 0.707107f, 1.366025f, - 1.414214f, 0.366025f, 1.0f},
	{1.366025f, -1.414214f, 0.366025f, 1.414214f, - 1.414214f, 0.000000f, 1.0f},
	{1.414214f, -1.414214f, 0.000000f, 1.673032f, - 1.000000f, - 0.448287f, 1.0f},
	{1.673032f, -1.000000f, -0.448287f,1.982419f, - 1.404854f, - 1.061311f, 1.0f},
	{1.499999f, -1.000000f, -0.866025f, 1.224744f, - 1.000000f, - 1.224744f, 1.0f},
	{1.224744f, -1.000000f, -1.224744f, 0.866025f, - 1.000000f - 1.499999f, 1.0f},
	{0.866025f, -1.000000f, -1.499999f, 0.448288f, - 1.000000f - 1.673032f, 1.0f},
	{0.448288f, -1.000000f, -1.673032f, -0.609977f, - 1.343988f, -2.418411f, 1.0f},
	{0.000000f, -1.000000f, -1.732050f, -0.866025f, - 1.000000f, -1.500000f, 1.0f},
	{-0.448287f, -1.000000f, -1.673032f, -1.224744f, - 1.000000f,-1.224745, 1.0f},
	{-0.866025f, -1.000000f, -1.500000f, -1.500000f, - 1.000000f, -0.866025f, 1.0f},
	{-1.224744f, -1.000000f, -1.224745f, -1.673032f, - 1.000000f, -0.448288f, 1.0f},
	{-1.500000f, -1.000000f, -0.866025f, -1.732050f, - 1.000000f, -0.000000f, 1.0f},
	{-1.673032f, -1.000000f, -0.448288f, -1.673032f, - 1.000000f, 0.448288f, 1.0f},
	{-1.732050f, -1.000000f, -0.000000f, -1.500000f, - 1.000000f, 0.866025f, 1.0f},
	{-1.673032f, -1.000000f, 0.448288f, -1.224745f, - 1.000000f, 1.224745f, 1.0f},
	{-1.500000f, -1.000000f, 0.866025f, -1.254372f, - 1.390128f, 2.013793f, 1.0f},
	{-1.224745f, -1.000000f, 1.224745f, -0.448288f, - 1.000000f, 1.673032f, 1.0f},
	{-0.866025f, -1.000000f, 1.500000f, -0.000000f, - 1.000000f, 1.732051f, 1.0f},
	{-0.448288f, -1.000000f, 1.673032f, 0.448288f, - 1.000000f, 1.673033f, 1.0f},
	{-0.000000f, -1.000000f, 1.732051f, 0.866025f, - 1.000000f, 1.500000f, 1.0f},
	{0.448288f, -1.000000f, 1.673033f, 1.224745f, - 1.000000f, 1.224745f, 1.0f},
	{0.866025f, -1.000000f, 1.500000f, 2.335805f, -1.425147f, 1.200502f, 1.0f},
	{1.224745f, -1.000000f, 1.224745f, 1.673033f, -1.000000f, 0.448288f, 1.0f},
	{1.500000f, -1.000000f, 0.866025f, 1.732051f, -1.000000f, 0.000000f, 1.0f},
	{1.673033f, -1.000000f, 0.448288f, 1.866024f, -0.517638f, -0.500000f, 1.0f},
	{1.732051f, -1.000000f, 0.000000f, 1.673032f, -0.517638f, -0.965925f, 1.0f},
	{1.866024f, -0.517638f, -0.500000f, 1.366025f, -0.517638f, -1.366024f, 1.0f},
	{1.673032f, -0.517638f, -0.965925f, 0.965925f, -0.517638f, -1.673032f, 1.0f},
	{1.366025f, -0.517638f, -1.366024f, 0.778419f, -0.637758f, -2.700972f, 1.0f},
	{0.965925f, -0.517638f, -1.673032f,0.000000f, - 0.517638f, -1.9318515f, 1.0f},
	{0.500000f, -0.517638f, -1.866024f, -0.500000f, -0.517638f, -1.866024f, 1.0f},
	{0.000000f, -0.517638f, -1.931851f,-0.965925f, - 0.517638f, -1.673032f, 1.0f},
	{-0.500000f, -0.517638f, -1.866024f, -1.366025f, -0.517638f, -1.366025, 1.0f},
	{-0.965925f, -0.517638f, -1.673032f, -2.211102f, -0.767357f, -1.193341f, 1.0f},
	{-1.366025f, -0.517638f, -1.366025f, -1.866025f, -0.517638f, -0.500000f, 1.0f},
	{-1.673032f, -0.517638f, -0.965926f, 1.931851f, - 0.517638f, -0.000000f, 1.0f},
	{-1.866025f, -0.517638f, -0.500000f, -1.866025f,- 0.517638f, 0.500000f, 1.0f},
	{-1.931851f, -0.517638f, -0.000000f, -2.403136f,- 0.637758f, 1.445308f, 1.0f},
	{-1.866025f, -0.517638f, 0.500000f, -1.366025f,- 0.517638f, 1.366025f, 1.0f},
	{-1.673032f, -0.517638f, 0.965925f, -0.965926f,- 0.517638f, 1.6730325f, 1.0f},
	{-1.366025f, -0.517638f, 1.366025f,-0.500000f, - 0.517638f, 1.866025f, 1.0f},
	{-0.965926f, -0.517638f, 1.673032f,-0.000000f, - 0.517638f, 1.931851f, 1.0f},
	{-0.500000f, -0.517638f, 1.866025f, 0.500000f,- 0.517638f, 1.866025f, 1.0f},
	{-0.000000f, -0.517638f, 1.931851f, 0.965926f,- 0.517638f, 1.673032f, 1.0f},
	{0.500000f, -0.517638f, 1.866025f, 1.366025f, - 0.517638f, 1.366025f, 1.0f},
	{0.965926f, -0.517638f, 1.673032f, 1.673033f,- 0.517638f, 0.965926f, 1.0f},
	{1.366025f, -0.517638f, 1.366025f, 1.866025f,- 0.517638f, 0.500000f, 1.0f},
	{1.673033f, -0.517638f, 0.965926f,2.635035f, - 0.719583f, -0.071399f, 1.0f},
	{1.866025f, -0.517638f, 0.500000f, 1.931851f, 0.000000f,-0.517638f, 1.0f},
	{1.931852f, -0.517638f, 0.000000f, 1.732050f, 0.000000f,- 0.999999f, 1.0f},
	{1.931851f, 0.000000f, -0.517638f, 1.414213f, 0.000000f,- 1.414213f, 1.0f},
	{1.732050f, 0.000000f, -0.999999f, 1.000000f, 0.000000f,- 1.732050f, 1.0f},
	{1.414213f, 0.000000f, -1.414213f, 0.517638f, 0.000000f,- 1.931850f, 1.0f},
	{1.000000f, 0.000000f, -1.732050f, 0.000000f, 0.000000f,- 1.999999f, 1.0f},
	{0.517638f, 0.000000f, -1.931850f,  -0.517638f, 0.000000f, -1.931851f, 1.0f},
	{ 0.000000f, 0.000000f, -1.999999f, -0.999999f, 0.000000f, -1.732050f, 1.0f},
	{-0.517638f, 0.000000f, -1.931851f, -1.414213f, 0.000000f, -1.414213f, 1.0f},
	{-0.999999f, 0.000000f, -1.732050f, -1.732050f, 0.000000f, -1.000000, 1.0f},
	{ -1.414213f, 0.000000f, -1.414213f, -1.931851f, 0.000000f, -0.517638f, 1.0f},
	{-1.732050f, 0.000000f, -1.000000f, -1.999999f, 0.000000f, -0.000000f, 1.0f},
	{ -1.931851f, 0.000000f, -0.517638f, -1.931851f, 0.000000f, 0.517638f, 1.0f1},
	{-1.999999f, 0.000000f, -0.000000f, -1.732050f, 0.000000f, 1.000000f, 1.0f},
	{ -1.931851f, 0.000000f, 0.517638f, -1.414213f, 0.000000f, 1.414213f, 1.0f},
	{-1.732050f, 0.000000f, 1.000000f, -1.000000f, 0.000000f, 1.732050f, 1.0f},
	{-1.414213f, 0.000000f, 1.414213f,-0.839163f, 0.148460f, 2.877694f, 1.0f},
	{-1.000000f, 0.000000f, 1.732050f, -0.000000f, 0.000000f, 2.000000f, 1.0f},
	{-0.517638f, 0.000000f, 1.931851f, 0.517638f, 0.000000f, 1.931851f, 1.0f},
	{ -0.000000f, 0.000000f, 2.000000f,1.339641f, 0.000000f, 2.336373f, 1.0f},
	{ 0.517638f, 0.000000f, 1.931851f, 1.414213f, 0.000000f, 1.414214f, 1.0f},
	{ 1.000000f, 0.000000f, 1.732051f,2.357286f, 0.000000f, 1.318730f, 1.0f},
	{ 1.414213f, 0.000000f, 1.414214f, 1.931852f, 0.000000f, 0.517638f, 1.0f},
	{1.732051f, 0.000000f, 1.000000f, 2.000000f, 0.000000f, 0.000000f, 1.0f},
	{1.931852f, 0.000000f, 0.517638f, 1.866024f, 0.517638f, - 0.500000f, 1.0f},
	{2.000000f, 0.000000f, 0.000000f,2.211102f, 0.600878f, - 1.193340f, 1.0f},
	{1.866024f, 0.517638f, -0.500000f, 1.366025f, 0.517638f, - 1.366024f, 1.0f},
	{ 1.673032f, 0.517638f, -0.965925f, 0.965925f, 0.517638f, - 1.673032f, 1.0f},
	{1.366025f, 0.517638f, -1.366024f, -0.500000f, 0.517638f, - 1.866024f, 1.0f},
	{ 0.965925f, 0.517638f, -1.673032f, 0.000000f, 0.600878f, - 2.469920f, 1.0f},
	{ 0.500000f, 0.517638f, -1.866024f, -0.500000f, 0.517638f, - 1.866024f, 1.0f},
	{ 0.000000f, 0.517638f, -1.931851f, -1.367855f, 0.877999f,- 2.418411f, 1.0f},
	{-0.500000f, 0.517638f, -1.866024f, -1.366025f, 0.517638f, - 1.366025f, 1.0f},
	{-0.965925f, 0.517638f, -1.673032f, -2.376215f, 0.719583f,- 1.414159f, 1.0f},
	{-1.366025f, 0.517638f, -1.366025f, -1.866025f, 0.517638f, - 0.500000f, 1.0f},
	{-1.673032f, 0.517638f, -0.965926f, -2.782074f, 0.877999f, 0.031089f, 1.0f},
	{-1.866025f, 0.517638f, -0.500000f,-1.866025f, 0.517638f, 0.500000f, 1.0f},
	{-1.931851f, 0.517638f, -0.000000f, -1.673032f, 0.517638f, 0.965925f, 1.0f},
	{-1.866025f, 0.517638f, 0.500000f, -1.366025f, 0.517638f, 1.366025f, 1.0f},
	{-1.673032f, 0.517638f, 0.965925f,  -0.965926f, 0.517638f, 1.673032f, 1.0f},
	{-1.366025f, 0.517638f, 1.366025f,-0.000000f, 0.517638f, 1.931851f, 1.0f},
	{-0.965926f, 0.517638f, 1.673032f, 0.500000f, 0.517638f, 1.866025f, 1.0f},
	{-0.500000f, 0.517638f, 1.866025f, 0.965926f, 0.517638f, 1.673032f, 1.0f},
	{-0.000000f, 0.517638f, 1.931851f, 1.366025f, 0.517638f, 1.366025f, 1.0f},
	{ 0.500000f, 0.517638f, 1.866025f, 1.673033f, 0.517638f, 0.965926f, 1.0f},
	{0.965926f, 0.517638f, 1.673032f, 1.866025f, 0.517638f, 0.500000f, 1.0f},
	{1.366025f, 0.517638f, 1.366025f, 1.931852f, 0.517638f, 0.000000f, 1.0f},
	{1.673033f, 0.517638f, 0.965926f, 1.673032f, 1.000000f, - 0.448287f, 1.0f},
	{1.866025f, 0.517638f, 0.500000f, 1.499999f, 1.000000f, - 0.866025f, 1.0f},
	{1.931852f, 0.517638f, 0.000000f, 1.224744f, 1.000000f, - 1.224744f, 1.0f},
	{ 1.673032f, 1.000000f, - 0.448287f, 0.866025f, 1.000000f, - 1.499999f, 1.0f},
	{1.499999f, 1.000000f, - 0.866025f, 0.448288f, 1.000000f, - 1.673032f, 1.0f},
	{ 1.224744f, 1.000000f, -1.224744f, 0.000000f, 1.000000f, - 1.732050f, 1.0f},
	{0.866025f, 1.000000f, -1.499999f, -0.448287f, 1.000000f, - 1.673032f, 1.0f},
	{0.448288f, 1.000000f, -1.673032f, -0.866025f, 1.000000f, - 1.500000f, 1.0f},
	{0.000000f, 1.000000f, -1.732050f, -1.224744f, 1.000000f, - 1.224745f, 1.0f},
	{-0.448287f, 1.000000f, -1.673032f, -1.500000f, 1.000000f, - 0.866025f, 1.0f},
	{-0.866025f, 1.000000f, -1.500000f, -1.673032f, 1.000000f, - 0.448288f, 1.0f},
	{-1.224744f, 1.000000f, -1.224745f, -1.732050f, 1.000000f, - 0.000000f, 1.0f},
	{-1.500000f, 1.000000f, -0.866025f,-1.673032f, 1.000000f, 0.448288f, 1.0f},
	{-1.673032f, 1.000000f, -0.448288f, -1.500000f, 1.000000f, 0.866025f, 1.0f},
	{-1.73205f, 1.000000f, -0.000000f, -1.224745f, 1.000000f, 1.224745f, 1.0f},
	{-1.673032f, 1.000000f, 0.448288f, -0.866025f, 1.000000f, 1.500000f, 1.0f},
	{-1.500000f, 1.000000f, 0.866025f,-0.448288f, 1.000000f, 1.673032f, 1.0f},
	{-1.224745f, 1.000000f, 1.224745f, 0.046364f, 1.584228f, 2.566998f, 1.0f},
	{-0.866025f, 1.000000f, 1.500000f,0.046364f, 1.584228f, 2.566998f, 1.0f},
	{-0.448288f, 1.000000f, 1.673032f,0.866025f, 1.000000f, 1.500000f, 1.0f},
	{-0.000000f, 1.000000f, 1.732051f, 1.224745f, 1.000000f, 1.224745f, 1.0f},
	{ 0.448288f, 1.000000f, 1.673033f, 1.982420f, 1.238374f, 1.227790f, 1.0f},
	{0.866025f, 1.000000f, 1.500000f, 1.673033f, 1.000000f, 0.448288f, 1.0f},
	{1.224745f, 1.000000f, 1.224745f, 2.582274f, 1.584228f, 0.031089f, 1.0f},
	{1.500000f, 1.000000f, 0.866025f, 1.366025f, 1.414214f, - 0.366025f, 1.0f},
	{1.673033f, 1.000000f, 0.448288f,1.224744f, 1.414214f, - 0.707106f, 1.0f},
	{1.732051f, 1.000000f, 0.000000f, 1.000000f, 1.414214f, - 0.999999f, 1.0f},
	{1.366025f, 1.414214f, - 0.366025f, 0.707107f, 1.414214f, - 1.224744f, 1.0f},
	{1.224744f, 1.414214f, - 0.707106f, 0.707107f, 1.414214f, - 1.224744f, 1.0f},
	{1.000000f, 1.414214f, -0.999999f, 0.000000f, 1.414214f, - 1.414213f, 1.0f},
	{0.707107f, 1.414214f, -1.224744f, -0.366025f, 1.414214f, - 1.366025f, 1.0f},
	{0.366025f, 1.414214f, - 1.366024f,-0.707106f, 1.414214f, - 1.224744f, 1.0f},
	{ 0.000000f, 1.414214f, -1.414213f, -1.598210f, 2.373876f, - 1.7358875f, 1.0f},
	{-0.366025f, 1.414214f, -1.366025f, -1.224744f, 1.414214f, - 0.707107f, 1.0f},
	{-0.707106f, 1.414214f, -1.224744f, -1.366025f, 1.414214f, - 0.366025f, 1.0f},
	{-1.000000f, 1.414214f, -1.000000f, -1.414213f, 1.414214f, - 0.000000f, 1.0f},
	{-1.224744f, 1.414214f, -0.707107f, -1.366025f, 1.414214f, 0.366025f, 1.0f},
	{-1.366025f, 1.414214f, -0.366025f, -1.618639f, 1.785804f, 1.017761f, 1.0f},
	{-1.414213f, 1.414214f, -0.000000f, -1.000000f, 1.414214f, 1.000000f, 1.0f},
	{-1.366025f, 1.414214f, 0.366025f, -0.707107f, 1.414214f, 1.224745f, 1.0f},
	{-1.224745f, 1.414214f, 0.707107f, -0.366025f, 1.414214f, 1.366025f, 1.0f},
	{-1.000000f, 1.414214f, 1.000000f, -0.000000f, 1.414214f, 1.414213f, 1.0f},
	{-0.707107f, 1.414214f, 1.224745f, 0.582265f, 2.190682f, 2.031098f, 1.0f},
	{-0.366025f, 1.414214f, 1.366025f, 0.707107f, 1.414214f, 1.224745f, 1.0f},
	{-0.000000f, 1.414214f, 1.414213f, 1.000000f, 1.414214f, 1.000000f, 1.0f},
	{0.366025f, 1.414214f, 1.366025f, 1.224745f, 1.414214f, 0.707107f, 1.0f},
	{0.707107f, 1.414214f, 1.224745f,1.366025f, 1.414214f, 0.366025f, 1.0f},
	{1.000000f, 1.414214f, 1.000000f, 1.414214f, 1.414214f, 0.000000f, 1.0f},
	{1.224745f, 1.414214f, 0.707107f, 0.965925f, 1.732051f, - 0.258819f, 1.0f},
	{1.366025f, 1.414214f, 0.366025f, 0.866025f, 1.732051f, - 0.500000f, 1.0f},
	{1.414214f, 1.414214f, 0.000000f, 0.707106f, 1.732051f, - 0.707106f, 1.0f},
	{0.965925f, 1.732051f, -0.258819f, 0.500000f, 1.732051f, - 0.866025f, 1.0f},
	{0.866025f, 1.732051f, -0.500000f, 0.309305f, 2.407772f, - 1.414158f, 1.0f},
	{0.707106f, 1.732051f, -0.707106f, 0.000000f, 1.732051f, - 0.999999f, 1.0f},
	{0.500000f, 1.732051f, -0.866025f, -0.258819, 1.732051f, - 0.965925f, 1.0f},
	{0.258819f, 1.732051f, -0.965925f, -0.500000f, 1.732051f, - 0.866025f, 1.0f},
	{ 0.000000f, 1.732051f, -0.999999f, -0.707106f, 1.732051f, - 0.707107f, 1.0f},
	{-0.258819f, 1.732051f, -0.965925f, -0.866025f, 1.732051f, - 0.500000f, 1.0f},
	{-0.500000f, 1.732051f, -0.866025f, -0.965926f, 1.732051f, - 0.258819f, 1.0f},
	{-0.707106f, 1.732051f, -0.707107f, -1.000000f, 1.732051f, - 0.000000f, 1.0f},
	{-0.866025f, 1.732051f, -0.500000f,-0.965926f, 1.732051f, 0.258819f, 1.0f},
	{ -0.965926f, 1.732051f, -0.258819f,-0.866025f, 1.732051f, 0.500000f, 1.0f},
	{-1.000000f, 1.732051f, -0.000000f, -0.707107f, 1.732051f, 0.707107f, 1.0f},
	{ -0.965926f, 1.732051f, 0.258819f, -0.500000f, 1.732051f, 0.866025f, 1.0f},
	{-0.866025f, 1.732051f, 0.500000f, -0.258819f, 1.732051f, 0.965926f, 1.0f},
	{-0.707107f, 1.732051f, 0.707107f,-0.000000f, 1.732051f, 1.000000f, 1.0f},
	{-0.500000f, 1.732051f, 0.866025f,0.258819f, 1.732051f, 0.965926f, 1.0f},
	{-0.258819f, 1.732051f, 0.965926f, 0.500000f, 1.732051f, 0.866025f, 1.0f},
	{-0.000000f, 1.732051f, 1.000000f,0.707107f, 1.732051f, 0.707107f, 1.0f},
	{ 0.258819f, 1.732051f, 0.965926f, 0.866025f, 1.732051f, 0.500000f, 1.0f},
	{ 0.500000f, 1.732051f, 0.866025f, 0.965926f, 1.732051f, 0.258819f, 1.0f},
	{ 0.707107f, 1.732051f, 0.707107f, 1.000000f, 1.732051f, 0.000000f, 1.0f},
	{ 0.866025f, 1.732051f, 0.500000f, 0.660807f, 2.469922f, - 0.093823f, 1.0f},
	{ 0.965926f, 1.732051f, 0.258819f, 0.448288f, 1.931852f, - 0.258819f, 1.0f},
	{ 1.000000f, 1.732051f, 0.000000f, -0.366025f, 1.931852f, - 0.366025f, 1.0f},
	{ 0.500000f, 1.931852f, -0.133974f, 0.258819f, 1.931852f, - 0.448287f, 1.0f},
	{ 0.448288f, 1.931852f, -0.258819f, 0.133975f, 1.931852f, - 0.500000f, 1.0f},
	{ 0.366025f, 1.931852f, -0.366025f, 0.000000f, 1.931852f, - 0.517638f, 1.0f},
	{ 0.258819f, 1.931852f, -0.448287f,-0.133974f, 1.931852f, - 0.500000f, 1.0f},
	{ 0.133975f, 1.931852f, -0.500000f,-0.258819f, 1.931852f, - 0.448288f, 1.0f},
	{ 0.000000f, 1.931852f, -0.517638f, -0.366025f, 1.931852f, - 0.366025f, 1.0f},
	{ -0.133974f, 1.931852f, -0.500000f,-0.448288f, 1.931852f, - 0.258819f, 1.0f},
	{ -0.258819f, 1.931852f, -0.448288f, -0.500000f, 1.931852f, - 0.133975f, 1.0f},
	{-0.366025f, 1.931852f, -0.366025f, -0.517638f, 1.931852f, - 0.000000f, 1.0f},
	{ -0.448288f, 1.931852f, -0.258819f, -0.745550f, 2.685521f, 0.114843f, 1.0f},
	{ -0.500000f, 1.931852f, -0.133975f, -0.448288f, 1.931852f, 0.258819f, 1.0f},
	{ -0.517638f, 1.931852f, -0.000000f, -0.366025f, 1.931852f, 0.366025f, 1.0f},
	{-0.500000f, 1.931852f, 0.133975f, -0.258819f, 1.931852f, 0.448288f, 1.0f},
	{-0.448288f, 1.931852f, 0.258819f, -0.133975f, 1.931852f, 0.500000f, 1.0f},
	{-0.366025f, 1.931852f, 0.366025f,-0.050486f, 2.685521f, 0.648185f, 1.0f},
	{-0.258819f, 1.931852f, 0.448288f, 0.133975f, 1.931852f, 0.500000f, 1.0f},
	{-0.133975f, 1.931852f, 0.500000f, 0.258819f, 1.931852f, 0.448288f, 1.0f},
	{-0.000000f, 1.931852f, 0.517638f, 0.366025f, 1.931852f, 0.366025f, 1.0f},
	{0.133975f, 1.931852f, 0.500000f, 0.448288f, 1.931852f, 0.258819f, 1.0f},
	{0.258819f, 1.931852f, 0.448288f, 0.500000, 1.931852, 0.133975f, 1.0f},
	{ 0.366025f, 1.931852f, 0.366025f,0.517638f, 1.931852f, 0.000000f, 1.0f},
	{ 0.448288f, 1.931852f, 0.258819f, 0.000000f, -2.000000f, 0.000000f, 1.0f},
	{ 0.500000f, 1.931852f, 0.133975f,0.000000f, 2.000000f, 0.000000f, 1.0f},
	{0.517638f, 1.931852f, 0.000000f,  0.000000f, -2.000000f, 0.000000f, 1.0f},
	{0.000000f, -2.000000f, 0.000000f,0.000000f, 2.000000f, 0.000000f, 1.0f},
	{ 0.000000f, 2.000000f, 0.000000f, -0.5f, -0.5f, 0.5f, 1.0f}


	};



	//Vertex verts[] =
	//{

	//{ -0.5f, 0.5f, 0.5f, 0.0f, 0.0f, 0.0f, 1.0f },
	//{ -0.5f, -0.5f, 0.5f,-0.5f, -0.5f, 0.5f, 1.0f },
	//{ 0.5f, -0.5f, 0.5f, 0.5f, -0.5f, 0.5f, 1.0f },
	//{ 0.5f, 0.5f, 0.5f, 0.0f, 0.0f, 0.0f, 1.0f },

	//{ -0.5f, -0.5f, -0.5f, -0.5f, -0.5f, -0.5f, 1.0f },
	//{ -0.5f, 0.5f, -0.5f, 0.0f, 0.0f, 0.0f, 1.0f },
	//{ 0.5f, 0.5f, -0.5f, 0.0f, 0.0f, 0.0f, 1.0f },
	//{ 0.5f, -0.5f, -0.5f, 0.5f, -0.5f, -0.5f, 1.0f }




	//faces
	
	unsigned int Indices[] =
	{    1/ 1/ 1, 2/ 2 / 2, 26 / 27 / 3, 25 / 26 / 4,
		 2 / 2 / 2, 3 / 3 / 5, 27 / 28 / 6, 26 / 27 / 3,
		 3 / 3 / 5, 4 / 4 / 7, 28 / 29 / 8, 27 / 28 / 6,
		 4 / 4 / 7, 5 / 5 / 9, 29 / 30 / 10, 28 / 29 / 8,
		 5 / 5 / 9, 6 / 6 / 11, 30 / 31 / 12, 29 / 30 / 10,
		 6 / 6 / 11, 7 / 7 / 13, 31 / 32 / 14, 30 / 31 / 12,
		 7 / 7 / 13, 8 / 8 / 15, 32 / 33 / 16, 31 / 32 / 14,
		 8 / 8 / 15, 9 / 9 / 17, 33 / 34 / 18, 32 / 33 / 16,
		 9 / 9 / 17, 10 / 10 / 19, 34 / 35 / 20, 33 / 34 / 18,
		 10 / 10 / 19, 11 / 11 / 21, 35 / 36 / 22, 34 / 35 / 20,
		 11 / 11 / 21, 12 / 12 / 23, 36 / 37 / 24 ,35 / 36 / 22,
		 12 / 12 / 23, 13 / 13 / 25, 37 / 38 / 26, 36 / 37 / 24,
		 13 / 13 / 25, 14 / 14 / 27, 38 / 39 / 28, 37 / 38 / 26,
		 14 / 14 / 27, 15 / 15 / 29, 39 / 40 / 30, 38 / 39 / 28,
		 15 / 15 / 29, 16 / 16 / 31, 40 / 41 / 32, 39 / 40 / 30,
		 16 / 16 / 31, 17 / 17 / 33, 41 / 42 / 34, 40 / 41 / 32,
		 17 / 17 / 33, 18 / 18 / 35, 42 / 43 / 36, 41 / 42 / 34,
		 18 / 18 / 35, 19 / 19 / 37, 43 / 44 / 38, 42 / 43 / 36,
		 19 / 19 / 37, 20 / 20 / 39, 44 / 45 / 40, 43 / 44 / 38,
		 20 / 20 / 39, 21 / 21 / 41, 45 / 46 / 42, 44 / 45 / 40,
		 21 / 21 / 41, 22 / 22 / 43, 46 / 47 / 44, 45 / 46 / 42,
		 22 / 22 / 43, 23 / 23 / 45, 47 / 48 / 46, 46 / 47 / 44,
		 23 / 23 / 45, 24 / 24 / 47, 48 / 49 / 48, 47 / 48 / 46,
		 24 / 24 / 47, 1 / 25 / 1, 25 / 50 / 4, 48 / 49 / 48,


		 2,
		 25 / 26 / 49, 26 / 27 / 50, 50 / 52 / 51, 49 / 51 / 52,
		 26 / 27 / 50, 27 / 28 / 53, 51 / 53 / 54, 50 / 52 / 51,
		 27 / 28 / 53, 28 / 29 / 55, 52 / 54 / 56, 51 / 53 / 54,
		 28 / 29 / 55, 29 / 30 / 57, 53 / 55 / 58, 52 / 54 / 56,
		 29 / 30 / 57, 30 / 31 / 59, 54 / 56 / 60, 53 / 55 / 58,
		 30 / 31 / 59, 31 / 32 / 61, 55 / 57 / 62, 54 / 56 / 60,
		 31 / 32 / 61, 32 / 33 / 63, 56 / 58 / 64, 55 / 57 / 62,
		 32 / 33 / 63, 33 / 34 / 65 ,57 / 59 / 66, 56 / 58 / 64,
		 33 / 34 / 65, 34 / 35 / 67, 58 / 60 / 68, 57 / 59 / 66,
		 34 / 35 / 67, 35 / 36 / 69, 59 / 61 / 70, 58 / 60 / 68,
		 35 / 36 / 69, 36 / 37 / 71, 60 / 62 / 72, 59 / 61 / 70,
		 36 / 37 / 71, 37 / 38 / 73, 61 / 63 / 74, 60 / 62 / 72,
		 37 / 38 / 73, 38 / 39 / 75, 62 / 64 / 76, 61 / 63 / 74,
		 38 / 39 / 75, 39 / 40 / 77, 63 / 65 / 78, 62 / 64 / 76,
		 39 / 40 / 77, 40 / 41 / 79, 64 / 66 / 80, 63 / 65 / 78,
		 40 / 41 / 79, 41 / 42 / 81, 65 / 67 / 82, 64 / 66 / 80,
		 41 / 42 / 81, 42 / 43 / 83, 66 / 68 / 84, 65 / 67 / 82,
		 42 / 43 / 83, 43 / 44 / 85, 67 / 69 / 86, 66 / 68 / 84,
		 43 / 44 / 85 ,44 / 45 / 87, 68 / 70 / 88, 67 / 69 / 86,
		 44 / 45 / 87, 45 / 46 / 89, 69 / 71 / 90, 68 / 70 / 88,
		 45 / 46 / 89, 46 / 47 / 91, 70 / 72 / 92, 69 / 71 / 90,
		 46 / 47 / 91, 47 / 48 / 93, 71 / 73 / 94, 70 / 72 / 92,
		 47 / 48 / 93, 48 / 49 / 95, 72 / 74 / 96, 71 / 73 / 94,
		 48 / 49 / 95, 25 / 50 / 49, 49 / 75 / 52, 72 / 74 / 96,
		 3,
		 49 / 51 / 97, 50 / 52 / 98, 74 / 77 / 99, 73 / 76 / 100,
		 50 / 52 / 98 ,51 / 53 / 101, 75 / 78 / 102, 74 / 77 / 99,
		 51 / 53 / 101, 52 / 54 / 103, 76 / 79 / 104, 75 / 78 / 102,
		 52 / 54 / 103, 53 / 55 / 105, 77 / 80 / 106 ,76 / 79 / 104,
		 53 / 55 / 105, 54 / 56 / 107, 78 / 81 / 108 ,77 / 80 / 106,
		 54 / 56 / 107, 55 / 57 / 109, 79 / 82 / 110, 78 / 81 / 108,
		 55 / 57 / 109, 56 / 58 / 111, 80 / 83 / 112, 79 / 82 / 110,
		 56 / 58 / 111, 57 / 59 / 113, 81 / 84 / 114, 80 / 83 / 112,
		 57 / 59 / 113, 58 / 60 / 115, 82 / 85 / 116, 81 / 84 / 114,
		 58 / 60 / 115, 59 / 61 / 117, 83 / 86 / 118, 82 / 85 / 116,
		 59 / 61 / 117, 60 / 62 / 119, 84 / 87 / 120, 83 / 86 / 118,
		 60 / 62 / 119, 61 / 63 / 121, 85 / 88 / 122, 84 / 87 / 120,
		 61 / 63 / 121, 62 / 64 / 123, 86 / 89 / 124, 85 / 88 / 122,
		 62 / 64 / 123, 63 / 65 / 125, 87 / 90 / 126, 86 / 89 / 124,
		 63 / 65 / 125, 64 / 66 / 127, 88 / 91 / 128, 87 / 90 / 126,
		 64 / 66 / 127, 65 / 67 / 129, 89 / 92 / 130, 88 / 91 / 128,
		 65 / 67 / 129, 66 / 68 / 131, 90 / 93 / 132, 89 / 92 / 130,
		 66 / 68 / 131, 67 / 69 / 133, 91 / 94 / 134, 90 / 93 / 132,
		 67 / 69 / 133, 68 / 70 / 135, 92 / 95 / 136, 91 / 94 / 134,
		 68 / 70 / 135, 69 / 71 / 137, 93 / 96 / 138, 92 / 95 / 136,
		 69 / 71 / 137, 70 / 72 / 139, 94 / 97 / 140, 93 / 96 / 138,
		 70 / 72 / 139, 71 / 73 / 141, 95 / 98 / 142, 94 / 97 / 140,
		 71 / 73 / 141, 72 / 74 / 143, 96 / 99 / 144, 95 / 98 / 142,
		 72 / 74 / 143, 49 / 75 / 97, 73 / 100 / 100 ,96 / 99 / 144,
		 4,
		 73 / 76 / 145, 74 / 77 / 146, 98 / 102 / 147, 97 / 101 / 148,
		 74 / 77 / 146, 75 / 78 / 149, 99 / 103 / 150, 98 / 102 / 147,
		 75 / 78 / 149, 76 / 79 / 151, 100 / 104 / 152 ,99 / 103 / 150,
		 76 / 79 / 151, 77 / 80 / 153, 101 / 105 / 154, 100 / 104 / 152,
		 77 / 80 / 153, 78 / 81 / 155, 102 / 106 / 156, 101 / 105 / 154,
		 78 / 81 / 155, 79 / 82 / 157, 103 / 107 / 158, 102 / 106 / 156,
		 79 / 82 / 157, 80 / 83 / 159, 104 / 108 / 160, 103 / 107 / 158,
		 80 / 83 / 159, 81 / 84 / 161, 105 / 109 / 162, 104 / 108 / 160,
		 81 / 84 / 161, 82 / 85 / 163, 106 / 110 / 164, 105 / 109 / 162,
		 82 / 85 / 163, 83 / 86 / 165, 107 / 111 / 166, 106 / 110 / 164,
		 83 / 86 / 165, 84 / 87 / 167, 108 / 112 / 168, 107 / 111 / 166,
		 84 / 87 / 167, 85 / 88 / 169, 109 / 113 / 170, 108 / 112 / 168,
		 85 / 88 / 169, 86 / 89 / 171, 110 / 114 / 172, 109 / 113 / 170,
		 86 / 89 / 171, 87 / 90 / 173, 111 / 115 / 174, 110 / 114 / 172,
		 87 / 90 / 173, 88 / 91 / 175, 112 / 116 / 176, 111 / 115 / 174,
		 88 / 91 / 175, 89 / 92 / 177, 113 / 117 / 178, 112 / 116 / 176,
		 89 / 92 / 177, 90 / 93 / 179, 114 / 118 / 180, 113 / 117 / 178,
		 90 / 93 / 179, 91 / 94 / 181, 115 / 119 / 182, 114 / 118 / 180,
		 91 / 94 / 181, 92 / 95 / 183, 116 / 120 / 184, 115 / 119 / 182,
		 92 / 95 / 183, 93 / 96 / 185, 117 / 121 / 186, 116 / 120 / 184,
		 93 / 96 / 185, 94 / 97 / 187 ,118 / 122 / 188, 117 / 121 / 186,
		 94 / 97 / 187, 95 / 98 / 189, 119 / 123 / 190, 118 / 122 / 188,
		 95 / 98 / 189, 96 / 99 / 191, 120 / 124 / 192, 119 / 123 / 190,
		 96 / 99 / 191, 73 / 100 / 145, 97 / 125 / 148, 120 / 124 / 192,
		 5,
		 97 / 101 / 193, 98 / 102 / 194, 122 / 127 / 195, 121 / 126 / 196,
		 98 / 102 / 194, 99 / 103 / 197, 123 / 128 / 198, 122 / 127 / 195,
		 99 / 103 / 197, 100 / 104 / 199, 124 / 129 / 200, 123 / 128 / 198,
		 100 / 104 / 199, 101 / 105 / 201, 125 / 130 / 202, 124 / 129 / 200,
		 101 / 105 / 201, 102 / 106 / 203, 126 / 131 / 204, 125 / 130 / 202,
		 102 / 106 / 203, 103 / 107 / 205, 127 / 132 / 206, 126 / 131 / 204,
		 103 / 107 / 205, 104 / 108 / 207, 128 / 133 / 208, 127 / 132 / 206,
		 104 / 108 / 207, 105 / 109 / 209, 129 / 134 / 210, 128 / 133 / 208,
		 105 / 109 / 209, 106 / 110 / 211 ,130 / 135 / 212, 129 / 134 / 210,
		 106 / 110 / 211, 107 / 111 / 213, 131 / 136 / 214, 130 / 135 / 212,
		 107 / 111 / 213, 108 / 112 / 215, 132 / 137 / 216, 131 / 136 / 214,
		 108 / 112 / 215, 109 / 113 / 217, 133 / 138 / 218, 132 / 137 / 216,
		 109 / 113 / 217, 110 / 114 / 219, 134 / 139 / 220, 133 / 138 / 218,
		 110 / 114 / 219, 111 / 115 / 221, 135 / 140 / 222, 134 / 139 / 220,
		 111 / 115 / 221, 112 / 116 / 223, 136 / 141 / 224, 135 / 140 / 222,
		 112 / 116 / 223, 113 / 117 / 225, 137 / 142 / 226, 136 / 141 / 224,
		 113 / 117 / 225, 114 / 118 / 227, 138 / 143 / 228, 137 / 142 / 226,
		 114 / 118 / 227, 115 / 119 / 229, 139 / 144 / 230, 138 / 143 / 228,
		 115 / 119 / 229, 116 / 120 / 231, 140 / 145 / 232, 139 / 144 / 230,
		 116 / 120 / 231, 117 / 121 / 233 ,141 / 146 / 234, 140 / 145 / 232,
		 117 / 121 / 233, 118 / 122 / 235, 142 / 147 / 236, 141 / 146 / 234,
		 118 / 122 / 235, 119 / 123 / 237, 143 / 148 / 238, 142 / 147 / 236,
		 119 / 123 / 237, 120 / 124 / 239, 144 / 149 / 240, 143 / 148 / 238,
		 120 / 124 / 239, 97 / 125 / 193 ,121 / 150 / 196 ,144 / 149 / 240,
		 6,
		 121 / 126 / 241, 122 / 127 / 242, 146 / 152 / 243, 145 / 151 / 244,
		 122 / 127 / 242, 123 / 128 / 245, 147 / 153 / 246, 146 / 152 / 243,
		 123 / 128 / 245, 124 / 129 / 247, 148 / 154 / 248, 147 / 153 / 246,
		 124 / 129 / 247, 125 / 130 / 249, 149 / 155 / 250, 148 / 154 / 248,
		 125 / 130 / 249, 126 / 131 / 251, 150 / 156 / 252, 149 / 155 / 250,
		 126 / 131 / 251, 127 / 132 / 253, 151 / 157 / 254, 150 / 156 / 252,
		 127 / 132 / 253, 128 / 133 / 255, 152 / 158 / 256, 151 / 157 / 254,
		 128 / 133 / 255, 129 / 134 / 257, 153 / 159 / 258, 152 / 158 / 256,
		 129 / 134 / 257, 130 / 135 / 259 ,154 / 160 / 260, 153 / 159 / 258,
		 130 / 135 / 259, 131 / 136 / 261, 155 / 161 / 262, 154 / 160 / 260,
		 131 / 136 / 261, 132 / 137 / 263, 156 / 162 / 264, 155 / 161 / 262,
		 132 / 137 / 263, 133 / 138 / 265, 157 / 163 / 266, 156 / 162 / 264,
		 133 / 138 / 265, 134 / 139 / 267, 158 / 164 / 268, 157 / 163 / 266,
		 134 / 139 / 267, 135 / 140 / 269, 159 / 165 / 270, 158 / 164 / 268,
		 135 / 140 / 269, 136 / 141 / 271, 160 / 166 / 272, 159 / 165 / 270,
		 136 / 141 / 271, 137 / 142 / 273, 161 / 167 / 274, 160 / 166 / 272,
		 137 / 142 / 273, 138 / 143 / 275, 162 / 168 / 276, 161 / 167 / 274,
		 138 / 143 / 275, 139 / 144 / 277, 163 / 169 / 278, 162 / 168 / 276,
		 139 / 144 / 277, 140 / 145 / 279, 164 / 170 / 280, 163 / 169 / 278,
		 140 / 145 / 279, 141 / 146 / 281, 165 / 171 / 282, 164 / 170 / 280,
		 141 / 146 / 281, 142 / 147 / 283, 166 / 172 / 284, 165 / 171 / 282,
		 142 / 147 / 283, 143 / 148 / 285, 167 / 173 / 286, 166 / 172 / 284,
		 143 / 148 / 285, 144 / 149 / 287, 168 / 174 / 288, 167 / 173 / 286,
		 144 / 149 / 287, 121 / 150 / 241, 145 / 175 / 244, 168 / 174 / 288,
		 7,
		 145 / 151 / 289, 146 / 152 / 290, 170 / 177 / 291, 169 / 176 / 292,
		 146 / 152 / 290, 147 / 153 / 293, 171 / 178 / 294, 170 / 177 / 291,
		 147 / 153 / 293, 148 / 154 / 295, 172 / 179 / 296, 171 / 178 / 294,
		 148 / 154 / 295, 149 / 155 / 297, 173 / 180 / 298, 172 / 179 / 296,
		 149 / 155 / 297, 150 / 156 / 299 ,174 / 181 / 300, 173 / 180 / 298,
		 150 / 156 / 299, 151 / 157 / 301, 175 / 182 / 302, 174 / 181 / 300,
		 151 / 157 / 301, 152 / 158 / 303, 176 / 183 / 304, 175 / 182 / 302,
		 152 / 158 / 303, 153 / 159 / 305, 177 / 184 / 306 ,176 / 183 / 304,
		 153 / 159 / 305, 154 / 160 / 307 ,178 / 185 / 308, 177 / 184 / 306,
		 154 / 160 / 307, 155 / 161 / 309, 179 / 186 / 310, 178 / 185 / 308,
		 155 / 161 / 309, 156 / 162 / 311, 180 / 187 / 312, 179 / 186 / 310,
		 156 / 162 / 311, 157 / 163 / 313 ,181 / 188 / 314, 180 / 187 / 312,
		 157 / 163 / 313, 158 / 164 / 315, 182 / 189 / 316, 181 / 188 / 314,
		 158 / 164 / 315, 159 / 165 / 317, 183 / 190 / 318, 182 / 189 / 316,
		 159 / 165 / 317, 160 / 166 / 319, 184 / 191 / 320, 183 / 190 / 318,
		 160 / 166 / 319, 161 / 167 / 321, 185 / 192 / 322, 184 / 191 / 320,
		 161 / 167 / 321, 162 / 168 / 323, 186 / 193 / 324 ,185 / 192 / 322,
		 162 / 168 / 323 ,163 / 169 / 325, 187 / 194 / 326, 186 / 193 / 324,
		 163 / 169 / 325, 164 / 170 / 327, 188 / 195 / 328, 187 / 194 / 326,
		 164 / 170 / 327, 165 / 171 / 329, 189 / 196 / 330, 188 / 195 / 328,
		 165 / 171 / 329, 166 / 172 / 331, 190 / 197 / 332, 189 / 196 / 330,
		 166 / 172 / 331, 167 / 173 / 333, 191 / 198 / 334, 190 / 197 / 332,
		 167 / 173 / 333, 168 / 174 / 335, 192 / 199 / 336, 191 / 198 / 334,
		 168 / 174 / 335, 145 / 175 / 289, 169 / 200 / 292, 192 / 199 / 336,
		 8,
		 169 / 176 / 337, 170 / 177 / 338, 194 / 202 / 339 ,193 / 201 / 340,
		 170 / 177 / 338, 171 / 178 / 341, 195 / 203 / 342, 194 / 202 / 339,
		 171 / 178 / 341, 172 / 179 / 343, 196 / 204 / 344, 195 / 203 / 342,
		 172 / 179 / 343, 173 / 180 / 345, 197 / 205 / 346, 196 / 204 / 344,
		 173 / 180 / 345, 174 / 181 / 347, 198 / 206 / 348, 197 / 205 / 346,
		 174 / 181 / 347, 175 / 182 / 349, 199 / 207 / 350 ,198 / 206 / 348,
		 175 / 182 / 349, 176 / 183 / 351, 200 / 208 / 352 ,199 / 207 / 350,
		 176 / 183 / 351 ,177 / 184 / 353, 201 / 209 / 354 ,200 / 208 / 352,
		 177 / 184 / 353 ,178 / 185 / 355, 202 / 210 / 356 ,201 / 209 / 354,
		 178 / 185 / 355, 179 / 186 / 357 ,203 / 211 / 358 ,202 / 210 / 356,
		 179 / 186 / 357 ,180 / 187 / 359, 204 / 212 / 360, 203 / 211 / 358,
		 180 / 187 / 359, 181 / 188 / 361, 205 / 213 / 362 ,204 / 212 / 360,
		 181 / 188 / 361 ,182 / 189 / 363, 206 / 214 / 364, 205 / 213 / 362,
		 182 / 189 / 363, 183 / 190 / 365, 207 / 215 / 366, 206 / 214 / 364,
		 183 / 190 / 365, 184 / 191 / 367, 208 / 216 / 368, 207 / 215 / 366,
		 184 / 191 / 367, 185 / 192 / 369, 209 / 217 / 370, 208 / 216 / 368,
		 185 / 192 / 369, 186 / 193 / 371, 210 / 218 / 372, 209 / 217 / 370,
		 186 / 193 / 371, 187 / 194 / 373, 211 / 219 / 374, 210 / 218 / 372,
		 187 / 194 / 373, 188 / 195 / 375, 212 / 220 / 376, 211 / 219 / 374,
		 188 / 195 / 375, 189 / 196 / 377, 213 / 221 / 378, 212 / 220 / 376,
		 189 / 196 / 377, 190 / 197 / 379, 214 / 222 / 380, 213 / 221 / 378,
		 190 / 197 / 379, 191 / 198 / 381, 215 / 223 / 382, 214 / 222 / 380,
		 191 / 198 / 381, 192 / 199 / 383, 216 / 224 / 384, 215 / 223 / 382,
		 192 / 199 / 383, 169 / 200 / 337, 193 / 225 / 340, 216 / 224 / 384,
		 9,
		 193 / 201 / 385, 194 / 202 / 386, 218 / 227 / 387, 217 / 226 / 388,
		 194 / 202 / 386, 195 / 203 / 389, 219 / 228 / 390, 218 / 227 / 387,
		 195 / 203 / 389, 196 / 204 / 391, 220 / 229 / 392, 219 / 228 / 390,
		 196 / 204 / 391, 197 / 205 / 393, 221 / 230 / 394, 220 / 229 / 392,
		 197 / 205 / 393, 198 / 206 / 395, 222 / 231 / 396, 221 / 230 / 394,
		 198 / 206 / 395, 199 / 207 / 397, 223 / 232 / 398, 222 / 231 / 396,
		 199 / 207 / 397, 200 / 208 / 399, 224 / 233 / 400, 223 / 232 / 398,
		 200 / 208 / 399, 201 / 209 / 401, 225 / 234 / 402, 224 / 233 / 400,
		 201 / 209 / 401, 202 / 210 / 403, 226 / 235 / 404 ,225 / 234 / 402,
		 202 / 210 / 403, 203 / 211 / 405, 227 / 236 / 406 ,226 / 235 / 404,
		 203 / 211 / 405, 204 / 212 / 407, 228 / 237 / 408 ,227 / 236 / 406,
		 204 / 212 / 407, 205 / 213 / 409, 229 / 238 / 410, 228 / 237 / 408,
		 205 / 213 / 409, 206 / 214 / 411, 230 / 239 / 412, 229 / 238 / 410,
		 206 / 214 / 411, 207 / 215 / 413, 231 / 240 / 414, 230 / 239 / 412,
		 207 / 215 / 413, 208 / 216 / 415, 232 / 241 / 416, 231 / 240 / 414,
		 208 / 216 / 415, 209 / 217 / 417, 233 / 242 / 418, 232 / 241 / 416,
		 209 / 217 / 417, 210 / 218 / 419, 234 / 243 / 420, 233 / 242 / 418,
		 210 / 218 / 419, 211 / 219 / 421, 235 / 244 / 422, 234 / 243 / 420,
		 211 / 219 / 421, 212 / 220 / 423, 236 / 245 / 424, 235 / 244 / 422,
		 212 / 220 / 423, 213 / 221 / 425, 237 / 246 / 426, 236 / 245 / 424,
		 213 / 221 / 425, 214 / 222 / 427, 238 / 247 / 428, 237 / 246 / 426,
		 214 / 222 / 427, 215 / 223 / 429, 239 / 248 / 430, 238 / 247 / 428,
		 215 / 223 / 429, 216 / 224 / 431, 240 / 249 / 432 ,239 / 248 / 430,
		 216 / 224 / 431, 193 / 225 / 385, 217 / 250 / 388, 240 / 249 / 432,
		 10,
		 217 / 226 / 433, 218 / 227 / 434, 242 / 252 / 435, 241 / 251 / 436,
		 218 / 227 / 434, 219 / 228 / 437, 243 / 253 / 438 ,242 / 252 / 435,
		 219 / 228 / 437, 220 / 229 / 439 ,244 / 254 / 440, 243 / 253 / 438,
		 220 / 229 / 439, 221 / 230 / 441, 245 / 255 / 442, 244 / 254 / 440,
		 221 / 230 / 441, 222 / 231 / 443, 246 / 256 / 444, 245 / 255 / 442,
		 222 / 231 / 443, 223 / 232 / 445, 247 / 257 / 446, 246 / 256 / 444,
		 223 / 232 / 445, 224 / 233 / 447 ,248 / 258 / 448, 247 / 257 / 446,
		 224 / 233 / 447, 225 / 234 / 449, 249 / 259 / 450, 248 / 258 / 448,
		 225 / 234 / 449, 226 / 235 / 451 ,250 / 260 / 452, 249 / 259 / 450,
		 226 / 235 / 451, 227 / 236 / 453 ,251 / 261 / 454, 250 / 260 / 452,
		 227 / 236 / 453, 228 / 237 / 455 ,252 / 262 / 456, 251 / 261 / 454,
		 228 / 237 / 455, 229 / 238 / 457 ,253 / 263 / 458, 252 / 262 / 456,
		 229 / 238 / 457, 230 / 239 / 459 ,254 / 264 / 460, 253 / 263 / 458,
		 230 / 239 / 459, 231 / 240 / 461 ,255 / 265 / 462 ,254 / 264 / 460,
		231 / 240 / 461 ,232 / 241 / 463, 256 / 266 / 464, 255 / 265 / 462,
		232 / 241 / 463 ,233 / 242 / 465, 257 / 267 / 466, 256 / 266 / 464,
		 233 / 242 / 465, 234 / 243 / 467, 258 / 268 / 468, 257 / 267 / 466,
		 234 / 243 / 467, 235 / 244 / 469, 259 / 269 / 470, 258 / 268 / 468,
		 235 / 244 / 469, 236 / 245 / 471, 260 / 270 / 472, 259 / 269 / 470,
		 236 / 245 / 471 ,237 / 246 / 473, 261 / 271 / 474, 260 / 270 / 472,
		 237 / 246 / 473 ,238 / 247 / 475, 262 / 272 / 476 ,261 / 271 / 474,
		 238 / 247 / 475 ,239 / 248 / 477, 263 / 273 / 478, 262 / 272 / 476,
		 239 / 248 / 477 ,240 / 249 / 479, 264 / 274 / 480, 263 / 273 / 478,
		 240 / 249 / 479 ,217 / 250 / 433, 241 / 275 / 436 ,264 / 274 / 480,
		 11,
		 2 / 2 / 481, 1 / 1 / 482, 265 / 276 / 483,
		 3 / 3 / 484, 2 / 2 / 481, 265 / 277 / 483,
		 4 / 4 / 485, 3 / 3 / 484 ,265 / 278 / 483,
		 5 / 5 / 486, 4 / 4 / 485, 265 / 279 / 483,
		 6 / 6 / 487, 5 / 5 / 486, 265 / 280 / 483,
		 7 / 7 / 488, 6 / 6 / 487, 265 / 281 / 483,
		 8 / 8 / 489, 7 / 7 / 488, 265 / 282 / 483,
		 9 / 9 / 490, 8 / 8 / 489 ,265 / 283 / 483,
		 10 / 10 / 491, 9 / 9 / 490, 265 / 284 / 483,
		 11 / 11 / 492, 10 / 10 / 491, 265 / 285 / 483,
		 12 / 12 / 493, 11 / 11 / 492, 265 / 286 / 483,
		 13 / 13 / 494, 12 / 12 / 493, 265 / 287 / 483,
		 14 / 14 / 495, 13 / 13 / 494, 265 / 288 / 483,
		 15 / 15 / 496, 14 / 14 / 495, 265 / 289 / 483,
		 16 / 16 / 497, 15 / 15 / 496, 265 / 290 / 483,
		 17 / 17 / 498, 16 / 16 / 497, 265 / 291 / 483,
		 18 / 18 / 499, 17 / 17 / 498, 265 / 292 / 483,
		 19 / 19 / 500, 18 / 18 / 499, 265 / 293 / 483,
		 20 / 20 / 501, 19 / 19 / 500, 265 / 294 / 483,
		 21 / 21 / 502, 20 / 20 / 501, 265 / 295 / 483,
		 22 / 22 / 503, 21 / 21 / 502, 265 / 296 / 483,
		 23 / 23 / 504, 22 / 22 / 503, 265 / 297 / 483,
		 24 / 24 / 505, 23 / 23 / 504, 265 / 298 / 483,
		 1 / 25 / 482 ,24 / 24 / 505 ,265 / 299 / 483,
		 12,
		 241 / 251 / 506, 242 / 252 / 507, 266 / 300 / 508,
		 242 / 252 / 507, 243 / 253 / 509, 266 / 301 / 508,
		 243 / 253 / 509, 244 / 254 / 510, 266 / 302 / 508,
		 244 / 254 / 510, 245 / 255 / 511, 266 / 303 / 508,
		 245 / 255 / 511, 246 / 256 / 512, 266 / 304 / 508,
		 246 / 256 / 512, 247 / 257 / 513, 266 / 305 / 508,
		 247 / 257 / 513, 248 / 258 / 514, 266 / 306 / 508,
		 248 / 258 / 514, 249 / 259 / 515, 266 / 307 / 508,
		 249 / 259 / 515, 250 / 260 / 516, 266 / 308 / 508,
		 250 / 260 / 516, 251 / 261 / 517, 266 / 309 / 508,
		 251 / 261 / 517, 252 / 262 / 518, 266 / 310 / 508,
		 252 / 262 / 518, 253 / 263 / 519 ,266 / 311 / 508,
		 253 / 263 / 519, 254 / 264 / 520, 266 / 312 / 508,
		 254 / 264 / 520, 255 / 265 / 521 ,266 / 313 / 508,
		 255 / 265 / 521, 256 / 266 / 522 ,266 / 314 / 508,
		 256 / 266 / 522, 257 / 267 / 523 ,266 / 315 / 508,
		 257 / 267 / 523, 258 / 268 / 524 ,266 / 316 / 508,
		 258 / 268 / 524, 259 / 269 / 525 ,266 / 317 / 508,
		 259 / 269 / 525, 260 / 270 / 526 ,266 / 318 / 508,
		 260 / 270 / 526, 261 / 271 / 527, 266 / 319 / 508,
		 261 / 271 / 527, 262 / 272 / 528, 266 / 320 / 508,
		 262 / 272 / 528, 263 / 273 / 529, 266 / 321 / 508,
		 263 / 273 / 529, 264 / 274 / 530, 266 / 322 / 508,
		 264 / 274 / 530, 241 / 275 / 506 ,266 / 323 / 508,

	};



	


	//declare a new instance of the mesh class

	Mesh * morphMesh = new Mesh();
	morphMesh->init();
	morphMesh->copyBufferData(verts, 270, Indices, 508);



	//Load Mesh
	//MeshCollection * waterMesh = new MeshCollection();
	//loadMeshFromFile("water.fbx", waterMesh);


	// Create and compile our GLSL program from the shaders
	GLuint programID = LoadShaders("MorphVert.glsl", "frag.glsl");
	//Set up positions for position, rotation and scale
	glm::vec3 position = glm::vec3(0.0f, -1.0f, 0.0f);
	glm::vec3 rotation = glm::vec3(glm::radians(10.0f), 0.0f, 0.0f);
	glm::vec3 scale = glm::vec3(3.5f, 3.5f, 3.5f);

	//calculate the translation, rotation and scale matrices using the above vectores
	glm::mat4 translationMatrix = glm::translate(position);
	glm::mat4 rotationMatrix = glm::rotate(rotation.x, glm::vec3(1.0f, 0.0f, 0.0f))
		*glm::rotate(rotation.y, glm::vec3(0.0f, 1.0f, 0.0f))
		*glm::rotate(rotation.z, glm::vec3(0.0f, 0.0f, 1.0f));
	glm::mat4 scaleMatrix = glm::scale(scale);

	//combine the above matrices into the model matrix 
	glm::mat4 modelMatrix = translationMatrix * rotationMatrix*scaleMatrix;

	//Set up vectors for our camera position
	glm::vec3 cameraPosition = glm::vec3(20.0f, 0.0f, 20.0f);
	glm::vec3 cameraLook = glm::vec3(0.0f, 0.0f, 0.0f);
	glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);

	//Calculate the view matrix
	glm::mat4 viewMatrix = glm::lookAt(cameraPosition, cameraLook, cameraUp);
	//Calculate our perspective matrix
	glm::mat4 projectionMatrix = glm::perspective(glm::radians(45.0f), (float)800 / (float)640, 0.1f, 100.0f);

	//Light properties
	glm::vec4 ambientLightColour = glm::vec4(1.0f, 1.0f, 1.0f, 1.0f);

	glm::vec4 diffuseLightColour = glm::vec4(0.0f, 0.0f, 0.0f, 1.0f);
	glm::vec4 specularLightColour = glm::vec4(0.0f, 0.0f, 0.0f, 1.0f);
	glm::vec3 lightDirection = glm::vec3(0.0f, 0.0f, 1.0f);


	//Material Properties
	glm::vec4 ambientMaterialColour = glm::vec4(0.0f, 0.0f, 0.0f, 1.0f);
	glm::vec4 diffuseMaterialColour = glm::vec4(0.5f, 0.5f, 0.5f, 1.0f);
	glm::vec4 specularMaterialColour= glm::vec4(1.0f, 1.0f, 1.0f, 1.0f);
	float specularMaterialPower = 25.0f;

	//Point light
	std::vector<PointLight> PointLights;
	PointLights.push_back({ glm::vec4(1.0f,1.0f,1.0f,1.0f),glm::vec4(1.0f,1.0f,1.0f,1.0f),glm::vec3(-5.0f,-8.0f,-40.0f) });
	PointLights.push_back({ glm::vec4(1.0f,1.0f,1.0f,1.0f),glm::vec4(1.0f,1.0f,1.0f,1.0f),glm::vec3(5.0f,-8.0f,-40.0f) });
	PointLights.push_back({ glm::vec4(1.0f,1.0f,1.0f,1.0f),glm::vec4(1.0f,1.0f,1.0f,1.0f),glm::vec3(5.0f,8.0f,-40.0f) });
	

	//Get the uniforms from the shader
	GLuint modelMatrixUniformLocation = glGetUniformLocation(programID, "modelMatrix");
	GLuint viewMatrixUniformLocation = glGetUniformLocation(programID, "viewMatrix");
	GLuint projectionMatrixUniformLocation = glGetUniformLocation(programID, "projectionMatrix");
	GLint diffuseTextureLocation = glGetUniformLocation(programID, "diffuseTexture");
	GLint specularTextureLocation = glGetUniformLocation(programID, "specularTexture");
	GLint normalTextureLocation = glGetUniformLocation(programID, "normalTexture");

	//textures
	GLint ambientLightColourLocation= glGetUniformLocation(programID, "ambientLightColour");
	GLint directionalLightDiffuseColourLocation = glGetUniformLocation(programID, "directionalLight.diffuseColour");
	GLint directionalLightSpecularColourLocation = glGetUniformLocation(programID, "directionalLight.specularColour");
	//light direction and camera position
	GLint lightDirectionLocation= glGetUniformLocation(programID, "directionalLight.direction");
	GLint cameraPositionLocation = glGetUniformLocation(programID, "cameraPosition");

    //lighting uniforms
	GLint ambientMaterialColourLocation= glGetUniformLocation(programID, "ambientMaterialColour");
	GLint diffuseMaterialColourLocation = glGetUniformLocation(programID, "diffuseMaterialColour");
	GLint specularMaterialColourLocation = glGetUniformLocation(programID, "specularMaterialColour");
	GLint specularMaterialPowerLocation = glGetUniformLocation(programID, "specularMaterialPower");

	const int MAX_NO_OF_POINT_LIGHTS = 8;
	GLint pointLightDiffuseColourLocations[MAX_NO_OF_POINT_LIGHTS];
	GLint pointLightSpecularColourLocations[MAX_NO_OF_POINT_LIGHTS];
	GLint pointLightPositionLocations[MAX_NO_OF_POINT_LIGHTS];


	//morphfactor value

	float morphBlendFactor = 0.0f;

	char characterBuffer[50];
	for (int i = 0; i < MAX_NO_OF_POINT_LIGHTS; i++)
	{
		sprintf(characterBuffer,"pointLights[%i].diffuseColour", i);
		pointLightDiffuseColourLocations[i] = glGetUniformLocation(programID, characterBuffer);
		
		sprintf(characterBuffer, "pointLights[%i].specularColour", i);
		pointLightSpecularColourLocations[i] = glGetUniformLocation(programID, characterBuffer);
		
		sprintf(characterBuffer, "pointLights[%i].position", i);
		pointLightPositionLocations[i]= glGetUniformLocation(programID, characterBuffer);
	}

	GLint numberOfPointLightsLocation = glGetUniformLocation(programID, "numberOfPointLights");

	//Animation
	GLint currentTimeLocation = glGetUniformLocation(programID, "currentTime");
	GLint morphBlendFactorLocation = glGetUniformLocation(programID, "morphBlendFactor");

	Timer timer;
	timer.Start();

	//Event loop, we will loop until running is set to false, usually if escape has been pressed or window is closed
	bool running = true;
	//SDL Event structure, this will be checked in the while loop
	SDL_Event ev;
	while (running)
	{
		//Poll for the events which have happened in this frame
		//https://wiki.libsdl.org/SDL_PollEvent
		while (SDL_PollEvent(&ev))
		{
			//Switch case for every message we are intereted in
			switch (ev.type)
			{
				//QUIT Message, usually called when the window has been closed
			case SDL_QUIT:
				running = false;
				break;
				//KEYDOWN Message, called when a key has been pressed down
			case SDL_KEYDOWN:
				//Check the actual key code of the key that has been pressed
				switch (ev.key.keysym.sym)
				{
					//Escape key
				case SDLK_ESCAPE:
					running = false;
					break;
				case SDLK_a:
					rotation.y -= 0.1f;
					break;
				case SDLK_d:
					rotation.y += 0.1f;
					break;
				case SDLK_w:
					rotation.x -= 0.1f;
					break;
				case SDLK_s:
					rotation.x += 0.1f;
					break;
				case SDLK_UP:
					morphBlendFactor += 0.1f;
					
					break;
				case SDLK_DOWN:
					morphBlendFactor -= 0.1f;
					break;
					
				}
			}
		}


		timer.Update();

		morphBlendFactor+= timer.GetDeltaTime();
		morphBlendFactor = glm::clamp(morphBlendFactor, 0.0f, 1.0f);


	

		//update
		translationMatrix = glm::translate(position);
		rotationMatrix = glm::rotate(rotation.x, glm::vec3(1.0f, 0.0f, 0.0f))
			*glm::rotate(rotation.y, glm::vec3(0.0f, 1.0f, 0.0f))
			*glm::rotate(rotation.z, glm::vec3(0.0f, 0.0f, 1.0f));
		scaleMatrix = glm::scale(scale);

		//combine the above matrices into the model matrix (order is important!!!! - TRS)
		modelMatrix = translationMatrix * rotationMatrix*scaleMatrix;

		//Do rendering here!
		glClearColor(0.0, 0.0, 0.0, 1.0);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		glUseProgram(programID);


		//send the uniforms across
		glUniformMatrix4fv(modelMatrixUniformLocation, 1, GL_FALSE, glm::value_ptr(modelMatrix));
		glUniformMatrix4fv(viewMatrixUniformLocation, 1, GL_FALSE, glm::value_ptr(viewMatrix));
		glUniformMatrix4fv(projectionMatrixUniformLocation, 1, GL_FALSE, glm::value_ptr(projectionMatrix));


		glUniform4fv(ambientMaterialColourLocation, 1, glm::value_ptr(ambientMaterialColour));
		glUniform4fv(diffuseMaterialColourLocation, 1, glm::value_ptr(diffuseMaterialColour));
		glUniform4fv(specularMaterialColourLocation, 1, glm::value_ptr(specularMaterialColour));
		
		glUniform4fv(ambientLightColourLocation, 1, glm::value_ptr(ambientLightColour));
		glUniform4fv(directionalLightDiffuseColourLocation, 1, glm::value_ptr(diffuseLightColour));
		glUniform4fv(directionalLightSpecularColourLocation, 1, glm::value_ptr(specularLightColour));
		glUniform1f(specularMaterialPowerLocation, specularMaterialPower);

		glUniform3fv(lightDirectionLocation, 1, glm::value_ptr(lightDirection));
		glUniform3fv(cameraPositionLocation, 1, glm::value_ptr(cameraPosition));

		for (int i=0; i < PointLights.size(); i++)
		{
			glUniform4fv(pointLightDiffuseColourLocations[i], 1, glm::value_ptr(PointLights[i].DiffuseColour));
			glUniform4fv(pointLightSpecularColourLocations[i], 1, glm::value_ptr(PointLights[i].SpecularColour));
			glUniform3fv(pointLightPositionLocations[i], 1, glm::value_ptr(PointLights[i].Position));
		}

		glUniform1i(numberOfPointLightsLocation, PointLights.size());
		glUniform1f(currentTimeLocation, timer.GetCurrentTime());
		glUniform1f(morphBlendFactorLocation, morphBlendFactor);


		
		morphMesh->render();

		SDL_GL_SwapWindow(window);
	}

	if (morphMesh)
	{
		delete morphMesh;
		morphMesh = nullptr;
	}
	

	glDeleteProgram(programID);
	//Delete Context
	SDL_GL_DeleteContext(gl_Context);
	//Destroy the window and quit SDL2, NB we should do this after all cleanup in this order!!!
	//https://wiki.libsdl.org/SDL_DestroyWindow
	SDL_DestroyWindow(window);
	//https://wiki.libsdl.org/SDL_Quit
	SDL_Quit();

	return 0;
}